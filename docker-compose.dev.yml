version: "3.8"

services:
  frontend:
    build: ./frontend
    container_name: review_analyzer_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_WS_URL=ws://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - analyzer-net

  backend:
    build: ./backend
    container_name: review_analyzer_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/review_analyzer
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - NLP_API_URL=${NLP_API_URL}
      - NLP_API_KEY=${NLP_API_KEY}
      - LLM_API_URL=${LLM_API_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - db
      - redis
      - otel-collector
    volumes:
      - ./backend:/app
    networks:
      - analyzer-net

  worker:
    build: ./backend
    container_name: review_analyzer_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/review_analyzer
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - NLP_API_URL=${NLP_API_URL}
      - NLP_API_KEY=${NLP_API_KEY}
      - LLM_API_URL=${LLM_API_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - db
      - redis
      - backend
      - otel-collector
    volumes:
      - ./backend:/app
    networks:
      - analyzer-net

  db:
    image: postgres:15
    container_name: review_analyzer_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: review_analyzer
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - analyzer-net

  redis:
    image: redis:7-alpine
    container_name: review_analyzer_redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - analyzer-net

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: review_analyzer_otel
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel_collector_config.yaml
    command: ["--config", "/etc/otel_collector_config.yaml"]
    ports:
      - "4317:4317"
      - "55681:55681"
    networks:
      - analyzer-net

  prometheus:
    image: prom/prometheus:latest
    container_name: review_analyzer_prometheus
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - analyzer-net

  grafana:
    image: grafana/grafana:latest
    container_name: review_analyzer_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - loki
    networks:
      - analyzer-net

  loki:
    image: grafana/loki:2.8.2
    container_name: review_analyzer_loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./observability/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - analyzer-net

  langfuse:
    image: langfuse/langfuse:latest
    container_name: review_analyzer_langfuse
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/langfuse
      - NEXTAUTH_SECRET=${LANGFUSE_NEXTAUTH_SECRET}
      - SALT=${LANGFUSE_SALT}
      - ENCRYPTION_KEY=${LANGFUSE_ENCRYPTION_KEY}
    ports:
      - "3002:3000"
    depends_on:
      - db
    networks:
      - analyzer-net

volumes:
  postgres_data:
  redis_data:

networks:
  analyzer-net:
    driver: bridge
