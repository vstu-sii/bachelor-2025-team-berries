openapi: 3.0.3
info:
  title: Review Analyzer API
  description: API системы анализа отзывов с маркетплейсов
  version: 1.0.0
  contact:
    name: AlexandraR
    email: support@review-analyzer.com
  license:
    name: Proprietary

servers:
  - url: https://api.review-analyzer.com/v1
    description: Production server
  - url: https://staging-api.review-analyzer.com/v1
    description: Staging server

tags:
  - name: Authentication
    description: Регистрация, вход и управление доступом
  - name: Analysis
    description: Управление анализами товаров
  - name: Projects
    description: Работа с проектами и историей анализов
  - name: User
    description: Управление профилем пользователя
  - name: Reviews
    description: Работа с отзывами

paths:
  # ==================== АУТЕНТИФИКАЦИЯ ====================
  /auth/register:
    post:
      tags: [Authentication]
      summary: Регистрация нового пользователя
      description: Создание учетной записи с отправкой email для подтверждения
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              valid_request:
                summary: Валидные данные регистрации
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
                  confirmPassword: "SecurePass123!"
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  summary: Успешная регистрация
                  value:
                    success: true
                    message: "Регистрация завершена. Проверьте email для подтверждения."
                    data:
                      userId: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                validation_error:
                  summary: Ошибка валидации
                  value:
                    success: false
                    error: "validation_error"
                    message: "Пароль должен содержать минимум 8 символов, включая заглавные и строчные буквы, цифры и специальные символы"
                    details:
                      - field: "password"
                        message: "Пароль слишком простой"
        '409':
          description: Email уже занят
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                email_exists:
                  summary: Email уже зарегистрирован
                  value:
                    success: false
                    error: "email_exists"
                    message: "Пользователь с таким email уже зарегистрирован"

  /auth/login:
    post:
      tags: [Authentication]
      summary: Вход в систему
      description: Аутентификация пользователя и получение токенов
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_credentials:
                summary: Валидные учетные данные
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Успешная аутентификация
                  value:
                    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expiresIn: 3600
                    user:
                      id: "550e8400-e29b-41d4-a716-446655440000"
                      email: "user@example.com"
                      emailVerified: true
                      createdAt: "2025-01-15T10:30:00Z"
                      lastLoginAt: "2025-01-19T14:20:00Z"
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Неверный email или пароль
                  value:
                    success: false
                    error: "invalid_credentials"
                    message: "Неверный email или пароль"

  /auth/verify-email:
    post:
      tags: [Authentication]
      summary: Подтверждение email
      description: Подтверждение email адреса с помощью токена
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  example: "abc123def456"
      responses:
        '200':
          description: Email подтвержден
        '400':
          description: Неверный или просроченный токен

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Обновление access token
      description: Получение нового access token с помощью refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
              examples:
                refresh_request:
                  value:
                    refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Токен обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: integer
              examples:
                success:
                  value:
                    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expiresIn: 3600
        '401':
          description: Неверный refresh token

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Выход из системы
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Успешный выход
        '401':
          description: Не авторизован

  # ==================== АНАЛИЗ ТОВАРОВ ====================
  /analysis/start:
    post:
      tags: [Analysis]
      summary: Запуск анализа товара
      description: Запуск процесса сбора и анализа отзывов по ссылке на товар
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisStartRequest'
            examples:
              wildberries_analysis:
                summary: Анализ товара с Wildberries
                value:
                  productUrl: "https://www.wildberries.ru/catalog/12345678/detail.aspx"
                  marketplace: "wildberries"
                  options:
                    maxReviews: 500
                    analyzeAspects: true
                    generateCharts: true
      responses:
        '202':
          description: Анализ принят в обработку
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStartResponse'
              examples:
                accepted:
                  value:
                    analysisId: "550e8400-e29b-41d4-a716-446655440000"
                    status: "pending"
                    estimatedTime: 120
                    message: "Анализ начат, ожидайте завершения"
        '400':
          description: Неверная ссылка или параметры
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_url:
                  value:
                    success: false
                    error: "invalid_url"
                    message: "Неподдерживаемый маркетплейс или неверный формат ссылки"
        '429':
          description: Превышен лимит запросов
          headers:
            X-RateLimit-Limit:
              description: Лимит запросов в час
              schema:
                type: integer
            X-RateLimit-Remaining:
              description: Оставшееся количество запросов
              schema:
                type: integer
            X-RateLimit-Reset:
              description: Время сброса лимита (Unix timestamp)
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                rate_limit:
                  value:
                    success: false
                    error: "rate_limit_exceeded"
                    message: "Слишком много запросов. Попробуйте через 15 минут."

  /analysis/{analysisId}/status:
    get:
      tags: [Analysis]
      summary: Статус анализа
      description: Получение текущего статуса выполнения анализа
      parameters:
        - name: analysisId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Статус анализа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStatusResponse'
              examples:
                in_progress:
                  value:
                    analysisId: "550e8400-e29b-41d4-a716-446655440000"
                    status: "analyzing"
                    progress: 75
                    currentStep: "Анализ тональности отзывов"
                    startedAt: "2025-01-19T14:20:00Z"
                    estimatedCompletion: "2025-01-19T14:22:00Z"
        '404':
          description: Анализ не найден

  /analysis/{analysisId}/results:
    get:
      tags: [Analysis]
      summary: Результаты анализа
      description: Получение детальных результатов анализа
      parameters:
        - name: analysisId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Результаты анализа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResultsResponse'
              examples:
                completed_analysis:
                  value:
                    analysisId: "550e8400-e29b-41d4-a716-446655440000"
                    status: "completed"
                    summary:
                      totalReviews: 347
                      positiveReviews: 245
                      negativeReviews: 67
                      neutralReviews: 35
                      averageRating: 4.2
                      analysisDuration: 45
                    charts:
                      sentimentDistribution:
                        type: "pie"
                        data:
                          - sentiment: "positive"
                            count: 245
                            percentage: 70.6
                          - sentiment: "negative"
                            count: 67
                            percentage: 19.3
                          - sentiment: "neutral"
                            count: 35
                            percentage: 10.1
                    aspects:
                      - aspect: "качество"
                        mentionCount: 156
                        positiveMentions: 120
                        negativeMentions: 25
                        neutralMentions: 11
                      - aspect: "доставка"
                        mentionCount: 89
                        positiveMentions: 45
                        negativeMentions: 40
                        neutralMentions: 4
                    topReviews:
                      mostPositive:
                        - id: "rev-001"
                          text: "Отличный товар, превзошел ожидания!"
                          rating: 5
                          author: "Анна"
                          date: "2025-01-15T10:30:00Z"
                          sentiment: "positive"
                      mostNegative:
                        - id: "rev-002"
                          text: "Товар пришел поврежденным"
                          rating: 1
                          author: "Иван"
                          date: "2025-01-14T16:45:00Z"
                          sentiment: "negative"
                    generatedAt: "2025-01-19T14:22:00Z"
        '404':
          description: Анализ не найден

  # ==================== ПРОЕКТЫ И ИСТОРИЯ ====================
  /projects:
    get:
      tags: [Projects]
      summary: Список проектов пользователя
      description: Получение списка всех анализов пользователя с пагинацией
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [createdAt, productName, status]
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, parsing, analyzing, completed, failed]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список проектов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsListResponse'
              examples:
                projects_list:
                  value:
                    projects:
                      - id: "550e8400-e29b-41d4-a716-446655440000"
                        productName: "Смартфон XYZ"
                        productUrl: "https://www.wildberries.ru/catalog/12345678/detail.aspx"
                        marketplace: "wildberries"
                        status: "completed"
                        totalReviews: 347
                        averageRating: 4.2
                        sentiment: "positive"
                        createdAt: "2025-01-19T14:20:00Z"
                        completedAt: "2025-01-19T14:22:00Z"
                    pagination:
                      page: 1
                      limit: 20
                      total: 45
                      totalPages: 3
                      hasNext: true
                      hasPrev: false

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: Детали проекта
      description: Получение детальной информации о проекте
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Детали проекта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetailResponse'
        '404':
          description: Проект не найден

  /projects/search:
    get:
      tags: [Projects]
      summary: Поиск по проектам
      description: Поиск проектов по названию товара или артикулу
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 100
        - name: marketplace
          in: query
          schema:
            type: string
            enum: [wildberries, ozon, yandex_market]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Результаты поиска
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectSummary'
                  total:
                    type: integer

  # ==================== ОТЗЫВЫ ====================
  /projects/{projectId}/reviews:
    get:
      tags: [Reviews]
      summary: Список отзывов проекта
      description: Получение всех отзывов по конкретному проекту
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sentiment
          in: query
          schema:
            type: string
            enum: [positive, negative, neutral]
        - name: rating
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Список отзывов
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReviewDetail'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  # ==================== ПОЛЬЗОВАТЕЛЬ ====================
  /user/profile:
    get:
      tags: [User]
      summary: Профиль пользователя
      description: Получение информации о текущем пользователе
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                user_profile:
                  value:
                    id: "550e8400-e29b-41d4-a716-446655440000"
                    email: "user@example.com"
                    emailVerified: true
                    createdAt: "2025-01-15T10:30:00Z"
                    lastLoginAt: "2025-01-19T14:20:00Z"
                    quota:
                      monthlyLimit: 100
                      usedThisMonth: 45
                      resetsAt: "2025-02-01T00:00:00Z"

  /user/profile:
    put:
      tags: [User]
      summary: Обновление профиля
      description: Обновление информации профиля пользователя
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              examples:
                update_email:
                  value:
                    email: "newemail@example.com"
      responses:
        '200':
          description: Профиль обновлен
        '400':
          description: Ошибка валидации
        '409':
          description: Email уже занят

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ==================== АУТЕНТИФИКАЦИЯ ====================
    RegisterRequest:
      type: object
      required: [email, password, confirmPassword]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
          example: user@example.com
        password:
          type: string
          minLength: 8
          maxLength: 100
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]'
          example: SecurePass123!
        confirmPassword:
          type: string
          example: SecurePass123!

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: SecurePass123!

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token для получения нового access token
        expiresIn:
          type: integer
          description: Время жизни токена в секундах
        user:
          $ref: '#/components/schemas/UserProfile'

    # ==================== АНАЛИЗ ====================
    AnalysisStartRequest:
      type: object
      required: [productUrl, marketplace]
      properties:
        productUrl:
          type: string
          format: uri
          maxLength: 1000
          example: https://www.wildberries.ru/catalog/12345678/detail.aspx
        marketplace:
          type: string
          enum: [wildberries, ozon, yandex_market]
          example: wildberries
        options:
          type: object
          properties:
            maxReviews:
              type: integer
              minimum: 1
              maximum: 2000
              default: 500
            analyzeAspects:
              type: boolean
              default: true
            generateCharts:
              type: boolean
              default: true

    AnalysisStartResponse:
      type: object
      properties:
        analysisId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, parsing, analyzing]
        estimatedTime:
          type: integer
          description: Примерное время выполнения в секундах
        message:
          type: string
          example: Анализ начат, ожидайте завершения

    AnalysisStatusResponse:
      type: object
      properties:
        analysisId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, parsing, analyzing, completed, failed]
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Процент выполнения
        currentStep:
          type: string
          example: Анализ тональности отзывов
        startedAt:
          type: string
          format: date-time
        estimatedCompletion:
          type: string
          format: date-time
        errorMessage:
          type: string
          description: Сообщение об ошибке, если статус failed

    AnalysisResultsResponse:
      type: object
      properties:
        analysisId:
          type: string
          format: uuid
        status:
          type: string
          enum: [completed]
        summary:
          $ref: '#/components/schemas/AnalysisSummary'
        charts:
          $ref: '#/components/schemas/ChartsData'
        aspects:
          type: array
          items:
            $ref: '#/components/schemas/AspectAnalysis'
        topReviews:
          $ref: '#/components/schemas/TopReviews'
        generatedAt:
          type: string
          format: date-time

    AnalysisSummary:
      type: object
      properties:
        totalReviews:
          type: integer
        positiveReviews:
          type: integer
        negativeReviews:
          type: integer
        neutralReviews:
          type: integer
        averageRating:
          type: number
          format: float
          minimum: 1
          maximum: 5
        analysisDuration:
          type: integer
          description: Время анализа в секундах

    ChartsData:
      type: object
      properties:
        sentimentDistribution:
          type: object
          properties:
            type:
              type: string
              enum: [pie]
            data:
              type: array
              items:
                type: object
                properties:
                  sentiment:
                    type: string
                  count:
                    type: integer
                  percentage:
                    type: number
        ratingOverTime:
          type: object
          properties:
            type:
              type: string
              enum: [line]
            data:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  averageRating:
                    type: number

    AspectAnalysis:
      type: object
      properties:
        aspect:
          type: string
          example: качество
        mentionCount:
          type: integer
        positiveMentions:
          type: integer
        negativeMentions:
          type: integer
        neutralMentions:
          type: integer
        sentimentScore:
          type: number
          format: float
          description: Общая оценка тональности аспекта от -1 до 1

    TopReviews:
      type: object
      properties:
        mostPositive:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        mostNegative:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        mostHelpful:
          type: array
          items:
            $ref: '#/components/schemas/Review'

    Review:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        rating:
          type: integer
        author:
          type: string
        date:
          type: string
          format: date-time
        sentiment:
          type: string
          enum: [positive, negative, neutral]
        helpfulCount:
          type: integer

    ReviewDetail:
      allOf:
        - $ref: '#/components/schemas/Review'
        - type: object
          properties:
            aspects:
              type: array
              items:
                type: string
            projectId:
              type: string
              format: uuid

    # ==================== ПРОЕКТЫ ====================
    ProjectsListResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSummary'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ProjectSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productName:
          type: string
        productUrl:
          type: string
        marketplace:
          type: string
        status:
          type: string
        totalReviews:
          type: integer
        averageRating:
          type: number
        sentiment:
          type: string
          enum: [positive, negative, neutral, mixed]
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    ProjectDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectSummary'
        - type: object
          properties:
            analysisResults:
              $ref: '#/components/schemas/AnalysisResultsResponse'

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    # ==================== ПОЛЬЗОВАТЕЛЬ ====================
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
        quota:
          type: object
          properties:
            monthlyLimit:
              type: integer
            usedThisMonth:
              type: integer
            resetsAt:
              type: string
              format: date-time

    # ==================== ОБЩИЕ СХЕМЫ ====================
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: validation_error
        message:
          type: string
          example: Неверный формат email
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        code:
          type: string
          description: Код ошибки для машинной обработки

  # ==================== ВАЛИДАЦИЯ И RATE LIMITING ====================
  parameters:
    RateLimitHeaders:
      in: header
      name: X-RateLimit
      schema:
        type: object
        properties:
          Limit:
            type: integer
          Remaining:
            type: integer
          Reset:
            type: integer

  responses:
    TooManyRequests:
      description: Слишком много запросов
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
        X-RateLimit-Remaining:
          schema:
            type: integer
        X-RateLimit-Reset:
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

# ==================== RATE LIMITING КОНФИГУРАЦИЯ ====================
x-rate-limit:
  default:
    requests: 1000
    period: 3600
    burst: 50
  authentication:
    register:
      requests: 5
      period: 3600
      burst: 2
    login:
      requests: 10
      period: 3600
      burst: 5
    verify-email:
      requests: 3
      period: 3600
      burst: 1
  analysis:
    start:
      requests: 50
      period: 3600
      burst: 10
    status:
      requests: 300
      period: 3600
      burst: 50
    results:
      requests: 200
      period: 3600
      burst: 30
  projects:
    list:
      requests: 200
      period: 3600
      burst: 40
    search:
      requests: 100
      period: 3600
      burst: 20
    details:
      requests: 300
      period: 3600
      burst: 50
  user:
    profile:
      requests: 100
      period: 3600
      burst: 20

# ==================== ВАЛИДАЦИЯ ДАННЫХ ====================
x-validation:
  email:
    pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    maxLength: 255
  password:
    minLength: 8
    maxLength: 100
    pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]"
  url:
    patterns:
      wildberries: "^https://www\\.wildberries\\.ru/catalog/\\d+/detail\\.aspx"
      ozon: "^https://www\\.ozon\\.ru/product/.*"
      yandex_market: "^https://market\\.yandex\\.ru/product/.*"
  uuid:
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
